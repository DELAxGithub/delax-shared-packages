#!/bin/bash

# ÊâãÂãï„Éó„É´Áî®„ÅÆÊ±éÁî®„Ç≥„Éû„É≥„Éâ - „Éë„É©„É°„Éº„ÇøÂåñÁâà
# ‰ªªÊÑè„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÉØ„É≥„Ç≥„Éû„É≥„Éâ„Åß„Éó„É´‚ÜíÈÄöÁü•‚Üí„Éì„É´„ÉâÊé®Â•®„Åæ„ÅßÂÆüË°å

set -e

# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Åã„ÇâË®≠ÂÆö„ÇíË™≠„ÅøËæº„ÅøÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
CONFIG_FILE="${DELAX_CONFIG_FILE:-./delax-config.yml}"
MAIN_BRANCH="${DELAX_MAIN_BRANCH:-main}"
REMOTE_NAME="${DELAX_REMOTE_NAME:-origin}"
PROJECT_NAME="${DELAX_PROJECT_NAME:-$(basename "$(pwd)")}"
PROJECT_TYPE="${DELAX_PROJECT_TYPE:-generic}"

# „Ç´„É©„ÉºÂá∫ÂäõÁî®
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Quick Pull - ${PROJECT_NAME} „Éó„É≠„Ç∏„Çß„ÇØ„Éà${NC}"
echo ""

# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØË™≠„ÅøËæº„Åø
if [ -f "$CONFIG_FILE" ]; then
    echo -e "${BLUE}üìã Loading config from $CONFIG_FILE${NC}"
    # YAML„ÅÆÁ∞°Âçò„Å™Ë™≠„ÅøËæº„ÅøÔºàbash„Åß„ÅØÈôêÂÆöÁöÑÔºâ
    if command -v yq >/dev/null 2>&1; then
        MAIN_BRANCH=$(yq eval '.git.main_branch // "main"' "$CONFIG_FILE" 2>/dev/null || echo "$MAIN_BRANCH")
        REMOTE_NAME=$(yq eval '.git.remote_name // "origin"' "$CONFIG_FILE" 2>/dev/null || echo "$REMOTE_NAME")
        PROJECT_NAME=$(yq eval '.project.name // ""' "$CONFIG_FILE" 2>/dev/null || echo "$PROJECT_NAME")
        PROJECT_TYPE=$(yq eval '.project.type // "generic"' "$CONFIG_FILE" 2>/dev/null || echo "$PROJECT_TYPE")
    fi
fi

# ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåGit„É™„Éù„Ç∏„Éà„É™„Åã„ÉÅ„Çß„ÉÉ„ÇØ
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Not a git repository${NC}"
    exit 1
fi

# ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„Ååmain„Åã„ÉÅ„Çß„ÉÉ„ÇØ
current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
if [ "$current_branch" != "$MAIN_BRANCH" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Current branch is '$current_branch', switching to '$MAIN_BRANCH'...${NC}"
    git checkout "$MAIN_BRANCH" 2>/dev/null || {
        echo -e "${RED}‚ùå Failed to switch to main branch${NC}"
        exit 1
    }
fi

# „Éó„É´Ââç„ÅÆÁä∂ÊÖã„ÇíË®òÈå≤
echo -e "${BLUE}üìä Checking current status...${NC}"
current_commit=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
short_current=$(echo "$current_commit" | cut -c1-8)

# ‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
if ! git diff-index --quiet HEAD -- 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è Working directory has uncommitted changes${NC}"
    echo -e "${BLUE}üí° Please commit or stash your changes before pulling${NC}"
    echo ""
    echo -e "${PURPLE}Uncommitted files:${NC}"
    git status --porcelain
    echo ""
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üõë Pull cancelled${NC}"
        exit 0
    fi
fi

# Fetch to check for updates
echo -e "${BLUE}üîç Fetching latest changes...${NC}"
if ! git fetch "$REMOTE_NAME" "$MAIN_BRANCH" 2>/dev/null; then
    echo -e "${RED}‚ùå Failed to fetch from remote${NC}"
    exit 1
fi

# „É™„É¢„Éº„Éà„ÅÆÊúÄÊñ∞„Ç≥„Éü„ÉÉ„Éà„ÇíÂèñÂæó
remote_commit=$(git rev-parse "$REMOTE_NAME/$MAIN_BRANCH" 2>/dev/null || echo "unknown")
short_remote=$(echo "$remote_commit" | cut -c1-8)

# Êõ¥Êñ∞„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
if [ "$current_commit" = "$remote_commit" ]; then
    echo -e "${GREEN}‚úÖ Already up to date${NC}"
    echo -e "${PURPLE}Current commit: $short_current${NC}"
    
    # ÈÄöÁü•„ÅØÈÄÅ‰ø°Ôºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
    echo -e "${BLUE}üì¢ Sending notification anyway...${NC}"
    if command -v delax-notify >/dev/null 2>&1; then
        delax-notify build-recommended
    elif [ -f "$(dirname "$0")/notify.sh" ]; then
        "$(dirname "$0")/notify.sh" build-recommended
    fi
    exit 0
fi

# Â§âÊõ¥„ÅÆÊ¶ÇË¶Å„ÇíË°®Á§∫
echo -e "${YELLOW}üì• New changes detected!${NC}"
echo -e "${PURPLE}Current:  $short_current${NC}"
echo -e "${PURPLE}Remote:   $short_remote${NC}"
echo ""

# „Ç≥„Éü„ÉÉ„ÉàÂ±•Ê≠¥„ÇíË°®Á§∫ÔºàÊúÄÂ§ß5‰ª∂Ôºâ
echo -e "${BLUE}üìã Recent commits to pull:${NC}"
git log --oneline "${current_commit}..${remote_commit}" -n 5 2>/dev/null || echo "Unable to show commit history"
echo ""

# „Éó„É´ÂÆüË°å„ÅÆÁ¢∫Ë™ç
read -p "Pull these changes? (Y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Nn]$ ]]; then
    echo -e "${YELLOW}üõë Pull cancelled${NC}"
    exit 0
fi

# „Éó„É´ÂÆüË°å
echo -e "${BLUE}üîÑ Pulling changes...${NC}"
if git pull "$REMOTE_NAME" "$MAIN_BRANCH" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Successfully pulled latest changes!${NC}"
    
    new_commit=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
    short_new=$(echo "$new_commit" | cut -c1-8)
    
    echo -e "${PURPLE}Updated: $short_current ‚Üí $short_new${NC}"
    echo ""
    
    # ÊàêÂäüÈÄöÁü•„ÇíÈÄÅ‰ø°
    echo -e "${BLUE}üì¢ Sending notifications...${NC}"
    if command -v delax-notify >/dev/null 2>&1; then
        # „Éó„É´ÂÆå‰∫ÜÈÄöÁü•
        delax-notify merge-pulled "$new_commit"
        echo -e "${GREEN}üì± Pull completion notification sent${NC}"
        
        # Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„Çâ„Éì„É´„ÉâÊé®Â•®ÈÄöÁü•
        sleep 1
        echo -e "${GREEN}üî® Build recommendation sent${NC}"
    elif [ -f "$(dirname "$0")/notify.sh" ]; then
        "$(dirname "$0")/notify.sh" merge-pulled "$new_commit"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Notification script not found, skipping notifications${NC}"
    fi
    
    echo ""
    echo -e "${GREEN}üéâ Quick pull completed successfully!${NC}"
    echo -e "${BLUE}üí° Next steps (${PROJECT_TYPE} project):${NC}"
    
    case "$PROJECT_TYPE" in
        "ios-swift")
            echo -e "${PURPLE}   1. Open Xcode${NC}"
            echo -e "${PURPLE}   2. Build the project (‚åò+B)${NC}"
            echo -e "${PURPLE}   3. Test on simulator or device${NC}"
            ;;
        "react-typescript"|"pm-web")
            echo -e "${PURPLE}   1. Run: pnpm install${NC}"
            echo -e "${PURPLE}   2. Run: pnpm dev${NC}"
            echo -e "${PURPLE}   3. Test in browser${NC}"
            ;;
        "flutter")
            echo -e "${PURPLE}   1. Run: flutter pub get${NC}"
            echo -e "${PURPLE}   2. Run: flutter run${NC}"
            echo -e "${PURPLE}   3. Test on simulator or device${NC}"
            ;;
        *)
            echo -e "${PURPLE}   1. Run project-specific build command${NC}"
            echo -e "${PURPLE}   2. Test the changes${NC}"
            echo -e "${PURPLE}   3. Verify functionality${NC}"
            ;;
    esac
    echo ""
    
else
    echo -e "${RED}‚ùå Failed to pull changes${NC}"
    echo ""
    echo -e "${BLUE}üí° Possible solutions:${NC}"
    echo -e "${PURPLE}   1. Check for merge conflicts${NC}"
    echo -e "${PURPLE}   2. Ensure you have the latest changes committed${NC}"
    echo -e "${PURPLE}   3. Try: git status${NC}"
    exit 1
fi